<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAA+EwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAEwVJ
        REFUeNrt3X2QXXV9x/H3bnY3u3nYbIBAIAlkg4AREMJDLFSaQhBQ2mmrLcyopTM6tUgt1o62SClSbcuT
        QBCx1VHUPqNUqbaALcVOaYIEC/IM4UkeDQmEkCeS7MPtH99zu7eZsDl3z917zzn3/Zq5E525e7h79/w+
        v9/5nd/5/kCSJEmSJEmSJEmSJEmSJEmSJEmSJElSTnX4FbSdHqAv+bcbGAV2Jq+tQMWvyABQucwFlgBv
        Bw4H5gGzgYGk4b8GvAI8BTwI/AR4BHjDr04qrkOATwGrgU1E776n1xDwM+AfgF8BZvo1SsUyAHwUeJgY
        4lcm+NoM3AScAHT6tUr5dyzwXWBHhoa/6+t54A+TYJGUQ7OAjwFPNrDh1752At8DTsS5IylXlhJD9e2T
        1Ph3HQ1cAOzj1y611mzgE8AzTWj4u04U3gosw7kBqek6iIm5fyaG5pUWvV4CLiZuM0pqgr2JCbnnWtjw
        a1/DwB3A6cAU/zzS5OgATgL+lRiC56Hx177WAX9BLDKS1EBzgAuBFxrQUEeJhT73AN8HbgceJf1CoT0d
        +07gTGKZsXLO2zn51klMtF0ALCf7EPt54GbgNmLp747kmH3AW4GziFFGX8b/zgbg68B1wLP+GQ0A1W8u
        8DvAuWSfZNtB9PRfAx4jeupd//ajxLLfU4EPAYc24HdYDVxGXLbs9E+aP07a5PNv8i7gGuAcoD/j8Z4h
        euKvAC8mDX93r86kkT4G3A10AYPEU4MTNQ84A9gPWEM8dCQDQG/iAGKG/8+AI8h2j3070fNeCvwXMXG4
        p+NVw2AD8CPgp8ACYg5ionqBdwDvBF4nnjgc9k9tAGhMF3EbbQXwQWBGxuM9mRzrBmLCr5P6Lvc6kkb6
        RBIEncRoYGqGz7R/8jvOT477qn92A0DRw34a+BywmGzzMtuI9fqXAatI1+uPFwIdwEbikuApYoSSZT5i
        KvGw0jJgCxFUQ54CBkA76iZul60AzgamZTze48mxvgG8TP29/nhBMJIEwF3EZOEiYmg/UfsBpwELk+Ou
        83QwANrJQuAi4E+J2fYsDXUr8fjv5cRwfZjGr8+vjgY2EesH1hBD+v0zfPYe4GjgFGLy8Qm8U2AAlFwP
        UWVnBfDrZL/f/ghwNfDXwHoa1+uPFwQjxJ2Fu5IGO5jx99iHuOtxCPA0sNbTxAAoo4OJB2cuTv53FpuB
        fyJ6/XuSRtmsp/Kqo4HNwI+JVYT7EfMDEw2fLuKux3LiEmMNsXZBBkDh9QLvBa4FfpVs184QRTs/D/w9
        MZM+2b3+eEFQIVb6rSIuRRYB0zMcc68kBN5G3IJ80dPHACiyQ4BLgD8mrvuz2ATcCFwJ3Etze/09BcEW
        4D7gIWJIPz/DZ+si7oaclhzjMWJNgwyAwugjZvZXAL9EtvvnEGW6rwT+kVik06pef7wQqBAPK60iwmqQ
        bOsZBogJwiOJR59f8LQyAIrgrcQ9/QuAAzMeayMx1P88cD9xfZznCjwdxF4CPwEeIIb0CzJ85inAYcRo
        oIe41bnNU8wAyKPpwPuJXv8Msq2hrxDD/CuBbydBkLdef7wQgKgWtJJY/z9Itmca+oFfJG4bvsBYMRQZ
        ALlwBFEM41NkL4ixAfhb4vbeg+S/1x8vCLYTI5f7iKrFCzKcc53AW4hwnUaMBrZ46hkArTSDeGLvGmL2
        OksRjFHilt7lwHeIB2eK0uuPFwIQ9/ZXEmsVBpMwyPKdLwOOS477UxwNGAAtcBSx5v4PiBVxWbwCfDMJ
        kkd2aTxl0EHc13+QuLSZARxEzPhP9HiDxMNFs4nRwCZPSQOgGfqJghlXE9elWXr9EWL57uVEpZ7NlLfM
        dnUB0TriTsFa4tbo7AzHnA78PPG48TpiheKop6gBMFmOTRrr+cTqtyzWEWWzVhA9WLWRlF0HsYT4EeKS
        pzcJgu4MxzuQmBvYJ/kuX/dUNQAaaRbwEeAqorBFV4ZjjRDXw5cRRTm30X6ba1RHA68QzxS8kDTivTMc
        s4/YK+FEYiL1qeS7lgGQyVLidtzHyL4d1lrgq0SJridrGkK76iDqAVTLkHUTo4FGlCGbi2XIDIAMZgPn
        EYtwTsj4XQ0TZbkuJbbUasdef7wQmIwyZEuJ0domImwtQ2YApD4hTySG++cSq9myeAn4MvBF4nHXdu/1
        x/veh4leu9FlyBYkx7UMmQEwrn2Iof4VwPEZv58h4IdEr/8DYlGMvf6eQ2DXMmTzyDbhWluGbBuWITMA
        3uTE+wWi1/9tst2agpjU+ivgS8Tjsvb69f89di1DNkhjypANYhkyA6DGvsDvE7f3jiFbL72T2IDj0uTf
        HdjrZwmBDuKW3mqiZNj+xOTeRMO0m1jAdUryt2n7MmTtHACdwMnEgp4PkW15KkRP/yWi538ee/1GBkG1
        DNkqLENmADTAXOCTxAM8R5Gtl95BXONfSlzz78RefzJCoLYM2WM0rgzZqcQlxuO0YRmydguAXbfdmpnx
        eLtuu1X0h3eKEAS1Zci2EaMBy5AZAHs0j9h268+BwzM21Oq2W5eRftstNTYIthAPFj1ErBmYR+PKkD1O
        FDYxAEqgC3g30et/gGy9BcRtpGuJnXYnsu2WGhcC1TJkK7EMmQGwGwuAC4HPEqW68rLtlhobBI0uQ3Yo
        bVKGrKwB0EMU41wBnEV+t91S40IA/n8ZskVkm+PpJ+4SHU3MC5SyDFkZA2AhUYb7EuI2T9Ztt25mcrfd
        UmODoLYM2QCNKUN2ehImpStDVqYAmEpsu3Ut8D4as+3WNTRv2y01LgRgrAzZK0SnkLUM2UmMlSF7lpIU
        HilLANRuu7Uo47G2ADcRzwOsJj8bcKj+IKgtQzaTqDmQpQzZQmI0MEBJypAVPQB6id5+BdH7Z9126yHi
        8d+/I3oOe/3ih0C1DNlKYv5mIY0rQ7aegpchK3IAHEpsr93IbbeuIF/bbqlxQbATeJgoQ9ZHFCVt+zJk
        RQyA6rZb1wJnUv5tt9S4EKiWIVvF5JQhe5qClSErWgAsZmzbrQUZj7WRYm27pcYFQbUM2WoaW4Zsf6Lw
        yAYDoLGmAx8kZuVPJ/u2W/cRw/2ibbulxoXAZJUhO4m4HChEGbIiBMCRxPr9T9K4bbeuotjbbqlxQTAZ
        ZcjOoCBlyPIcADOA3yKe13fbLU1mCNSWIXua7GXIeihIGbK8BsDRjG27NTfjsV6l3NtuqXFBMJI01kaX
        IVuUHDd3ZcjyFgD9wIeJXn8Z2TbgGCWGdZdR/m231LgQmMwyZDuJy4LclCHLUwAcS0zMnU/U6ctiHXAD
        cauwnbbdUuOCoLYM2RAlLUOWhwDoIp7T/yKN2XZrFVGe6/vEwzz2+ppoCExWGbLlxJzDI7R4FWGrA2Aa
        8Alilv+AjMd6mdh26wu47ZYaGwSTUYbsZKLDupcW3i5sZQBMJUp0XUS2Ki61227dgttuafKCoFqG7GGy
        lyHrJUa8I8Tdh5asIGxVAHQQG3BcQrZiHS8RBTnddkvNOm8rRNn3lcTlQZYyZN3E4qFXicuMtgmAk4nb
        chPdbXcI+E9ihv823HZLzQ+CN4gVpQ8QzxPMn+A52EPc9r6XWJFY+gDYO2n8Syb489Vtt65PvjB7fbUq
        BGCsDNlGYjQwkTJk/cStxltpcjXiVgTAOcBHJ/Dfdtst5TUIGlGG7ECiQ7u3zAEwh1iOe1CdP/cc0eO7
        7ZbyGgIQ9/ZXMbEyZFOI0fH3aGIV4mYHwKnAeaR/mm+YuMa/FLgDt91S/oOgtgxZP3FZkPacnU3cEVhT
        xgCozvwvS/n+Icae138eH95RcUKgWobsbuJ23+EpQ6CHmFP492Z92Gb2pgNEHbW0bieG/a9jr6/i6SQm
        Bq+vs0Efn7SV0gXAXqSv3bce+LqNXyUJgW8k53Qai5K2UroAmE/6BRP/Q1wH2fhVhhBYQ/rZ/RlkL3yT
        ywAYIH1RjzXE/VCv+VV0HcSsftqJvW5KegkwnXRP+o2Q8zJKUp0qRDm6NE/+dZF9B+tcBkA36Xr0UXJU
        MEFqgOpioTQP/HSSrehtbgNAUs4YAJIBIMkAkGQASDIAJBkAkgwASQaAJANAkgEgyQCQZABIMgAkGQCS
        DABJBoAkA0CSASDJAJBkAEgyACQZAJIMAEkGgCQDQJIBIMkAkGQASDIAJBkAkurV5VeQO5XkRc2/RddR
        82+Hf2IDQLtv+KNAL7AvsB8wC+grcKPpALYCrwHrgVeT/99pEBgAGmv4AHOBk4DjgCVJ4+8CphS8sQwD
        Q8Bm4GFgJXAnsLYmJGQAtKVRoB/4ZeDXgMVJgy+TnuTfWcB8YDnwIHAzcBvwOs5FGQBt2vgHgd8D3gV0
        t9E5twQ4AlgKXAc8iyMBA6DNGv+hwMXEkL8ddQPvIS59LidGBYZAkzn0ak3jXwhc2MaNv6oDOBb4I+DA
        5LuRAVBaFeKa/3zg5/w6/s8xwMeB2ZTn1qcBoN0GwHuIa36N6QBOA870qzAAymoUmAecTftM+NWji7gT
        chBeChgAJXUSMfmn3VsMvBMvA5rGuwDNUQGmJwFQ733+EWIhTdFmyCvJ+VXPOdZJ3CK8CdhRwN/ZANCb
        NoZ+4JA6fualpCE8BGwpaGPoJXr13yCG9mm8HZgDPG8AGABlMpdYDZfGi8BHgFspx3D4DuAvU4bATGDv
        JAA0yZwDaI4KY2v707gJuKUkjR8iyL6d8r09wF4l+t0NAAEwI2UADAMPlPD3fzT53fZkCjDN08UAKJu0
        z8IPA9tL+PtvTxkA1gwwANpamU9+G7YBIMkAkGQASDIAJBkAkgwASQaAJANAkgEgyQCQZABIMgAkGQCS
        DABJBoAkA0CSASDJAJBkAEgyACQZAJIBIMkAkGQASDIAJBkAkgwASQaAJANAkgEgyQCQZABIMgAkGQCS
        DABJBoAkA0CSASDJAJBkAEgyACQZAJIMAEkGgCQDQJIBIMkAkGQASDIAJBkAkgwASQaAJANAkgEgyQCQ
        ZABIMgAkGQCSASDJAJBkAEgyACQZAJIMAEkGgCQDQJIBIMkAkGQASDIA3lzFr1tq3wAYAkZTfqap/mlU
        Mr0p29soMFzGANiRMgCmALNwxKDyqAD9ybmdJgDeKGMAvAGMpHxv2i9LKoJqp5bGCLC9jAHwGnEZkMYs
        oMvzRiXRXUcA7AQ2lDEA1gJbU773IGA6Xgao+CrANGBhyvdvA14uYwBsTkIgjYOBBQaAShIAC4DBlO9/
        GdhSxgDYAjyR8r0DwNEGgEoSAEuA2Snf/2RZA2AHcH8dn2sJ0GcIqOCNvy85lztS/swDlHQSkCQANqd8
        7/HAYgNABQ+AxcBxKd+/hfSdZCED4EHgmZTvnQOcjaMAFbfx9ybn8JyUP/MsMQIobQCsBf6jjvcvB95B
        ugVEUp6MAkuBU+r4mR8CPytzAIwC/0b6y4CZwG8C+xkCKljj3xc4h1jUlsbWpG2MNPODtuJpwB8Bd9fx
        /hOA84AZeCmg/Ksk5+rvAifW8XM/BlY1+8O2IgA2At8k/UxnJ/BeYiTQbQgo542/m+j531dH+xoC/gZ4
        tR0CAOAW6ku7HuDDwPuJiRUvB5Q3o8m5+YHkXO2u42dXA//Sig/dqgDYAFwLvF7Hz8wAPp689jIElLPG
        v1dybp5PLGNPawvwBZq4/DcPAQDwA+DGOn+mjxhe/QmwKPnivSRQq1SSc3ARcHFybvbVeYzv0KLeH1r7
        xN0O4GpikcQxdfxcJ/Du5Ev/VhIkrxArrTqQmtPwK8T9/dOAs4DDJnCcR4GriAeA2i4AAB4HPgPcQPrF
        ElWHAZ9OwuBG4C5ignFoN2HQ6mCoTPL7i9JoivYdVHbT6LuJdf0nEIt8jppgO9oIXEKTF/7kLQAgJgSv
        AD5HTKLU+/mPA44gHqK4P/lCHybmF4ZqXq0+oeq53OpLXmWpiTBMfUPjzuR3b2VRmI6ksVdfA8DbkgZ/
        FPHEau8Ej72TuO7/bqv/MHkZMk8DPktMomQ96XcCm4gCJBuTINhEE+us7UaFqHGwNEUQjBJB9lKO/j6N
        +P0PSBpOmt9/NbEstpW/fxexiGeg5tVP3JHKYgS4HriI9Avi2sIA8NXkC6r48lXC10hyjs8mJ/JUd287
        sTZgIOkprAmoMhkCvgZcSBNLfhUpACBmQ+8khlnHUN9iCimvthHX/J8hLk1zI4+97A5gJbCeGAn05/Az
        Smm9QKwRWEETK/2UxXLgv/Ha0VcxX3dS3+PATZf36+xngNuJIdTBOBpQMbwIXEdc79+f5w9alNtMnURh
        kHOJhT9zCvK51V7WE+tavkw88p7751WKdp95KlEr8CzgdGI5sBuIqJWGgaeIYh7fAu4h5rEKoagLTaYQ
        C2uWEyOCI4lRwUzc8lyTa4RYwLOeqHF5K1Hm7jmaXM2nnQOg1jRgb2KOYDExKhgE5hOPZfYy8SWbam/b
        k9dWYjb/GeBp4iGeJ4n7+duK/AuW9em5aYytpe/ERUWamBHGtut+o+iNXZIkSZIkSZIkSZIkSZIkSZIk
        SZIkSVKh/C/b3iUCDPp/ewAAAABJRU5ErkJggg==
</value>
  </data>
</root>