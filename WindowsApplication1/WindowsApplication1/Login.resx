<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>